{
  "_args": [
    [
      {
        "raw": "nested-error-stacks@^1.0.0",
        "scope": null,
        "escapedName": "nested-error-stacks",
        "name": "nested-error-stacks",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/stefan/Documents/Arbeit/HeiGIT/realtime_osm/api/node_modules/got"
    ]
  ],
  "_from": "nested-error-stacks@>=1.0.0 <2.0.0",
  "_id": "nested-error-stacks@1.0.2",
  "_inCache": true,
  "_location": "/nested-error-stacks",
  "_nodeVersion": "2.5.0",
  "_npmUser": {
    "name": "mdlavin",
    "email": "matt.lavin@gmail.com"
  },
  "_npmVersion": "2.13.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nested-error-stacks@^1.0.0",
    "scope": null,
    "escapedName": "nested-error-stacks",
    "name": "nested-error-stacks",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/got"
  ],
  "_resolved": "https://registry.npmjs.org/nested-error-stacks/-/nested-error-stacks-1.0.2.tgz",
  "_shasum": "19f619591519f096769a5ba9a86e6eeec823c3cf",
  "_shrinkwrap": null,
  "_spec": "nested-error-stacks@^1.0.0",
  "_where": "/home/stefan/Documents/Arbeit/HeiGIT/realtime_osm/api/node_modules/got",
  "author": {
    "name": "Matt Lavin",
    "email": "matt.lavin@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mdlavin/nested-error-stacks/issues"
  },
  "dependencies": {
    "inherits": "~2.0.1"
  },
  "description": "An Error subclass that will chain nested Errors and dump nested stacktraces",
  "devDependencies": {
    "chai": "~1.9.1",
    "mocha": "~1.18.2",
    "uuid": "~1.4.1"
  },
  "directories": {},
  "dist": {
    "shasum": "19f619591519f096769a5ba9a86e6eeec823c3cf",
    "tarball": "https://registry.npmjs.org/nested-error-stacks/-/nested-error-stacks-1.0.2.tgz"
  },
  "files": [
    "index.js",
    "LICENSE"
  ],
  "gitHead": "7eb0c2058a0fd038d63703b953ca9bacd70b866f",
  "homepage": "https://github.com/mdlavin/nested-error-stacks#readme",
  "keywords": [
    "error",
    "nested",
    "stack"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mdlavin",
      "email": "matt.lavin@gmail.com"
    }
  ],
  "name": "nested-error-stacks",
  "optionalDependencies": {},
  "readme": "Nested stacktraces for Node.js!\n===============================\n\n[![Build Status](https://travis-ci.org/mdlavin/nested-error-stacks.svg)](https://travis-ci.org/mdlavin/nested-error-stacks)\n[![NPM version](https://badge.fury.io/js/nested-error-stacks.svg)](http://badge.fury.io/js/nested-error-stacks)\n[![Dependency Status](https://david-dm.org/mdlavin/nested-error-stacks.svg)](https://david-dm.org/mdlavin/nested-error-stacks)\n\nWith this module, you can wrap a caught exception with extra context\nfor better debugging.  For example, a network error's stack would normally look\nlike this:\n\n    Error: connect ECONNREFUSED\n        at errnoException (net.js:904:11)\n        at Object.afterConnect [as oncomplete] (net.js:895:19)\n\nUsing this module, you can wrap the Error with more context to get a stack\nthat looks like this:\n\n    NestedError: Failed to communicate with localhost:8080\n        at Socket.<anonymous> (/Users/mattlavin/Projects/nested-stacks/demo.js:6:18)\n        at Socket.EventEmitter.emit (events.js:95:17)\n        at net.js:440:14\n        at process._tickCallback (node.js:415:13)\n    Caused By: Error: connect ECONNREFUSED\n        at errnoException (net.js:904:11)\n        at Object.afterConnect [as oncomplete] (net.js:895:19)\n\nHow to wrap errors\n------------------\n\nHere is an example program that uses this module to add more context to errors:\n\n```js\nvar NestedError = require('nested-error-stacks');\nvar net = require('net');\n    \nvar client = net.connect({port: 8080});\nclient.on('error', function (err) {\n    var newErr = new NestedError(\"Failed to communicate with localhost:8080\", err);\n    console.log(newErr.stack);\n});\n```\n\nHow to inherit\n--------------\n\nIt is recomennded to use explicit names for Error classes. You can do it\nlike this:\n\n```js\nvar util = require('util');\nvar NestedError = require('nested-error-stacks');\n\nfunction MyError(message, nested) {\n    NestedError.call(this, message, nested);\n}\n\nutil.inherits(MyError, NestedError);\nMyError.prototype.name = 'MyError';\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mdlavin/nested-error-stacks.git"
  },
  "scripts": {
    "test": "if [ \"$RUN_ZUUL\" != \"true\" ]; then node_modules/.bin/mocha; else npm install zuul && node_modules/.bin/zuul -- test.js; fi"
  },
  "version": "1.0.2"
}
